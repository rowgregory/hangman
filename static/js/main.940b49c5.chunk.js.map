{"version":3,"sources":["layouts/AppLayout.tsx","variables/letters.tsx","components/Column.tsx","components/Alphabet.tsx","components/RandomizeCategory.tsx","components/Hint.tsx","utils/EndGameAnimation.tsx","components/GameOver.tsx","components/Underscores.tsx","components/HangmanScreen.tsx","variables/words.tsx","components/Hangman.tsx","App.tsx","index.tsx"],"names":["AppLayout","children","style","display","flexDirection","letters","Column","size","columnSize","split","map","join","className","LetterContainer","styled","div","ButtonStyles","button","BorderRadius","borderRadius","Alphabet","guess","usedLetters","gameOver","margin","wrongLetters","underscores","width","letter","i","key","onClick","disabled","indexOf","RandomBtn","RandomizeCategory","categories","randomize","counter","cursor","HintButton","Hint","giveHint","word","lettersLeft","usedHint","guessesLeft","whenActive","DropBody","keyframes","Body","g","props","wait","css","EndGameAnimation","amountOfPartsToDisplay","win","height","viewBox","xmlns","from","svgDraw","to","duration","delay","x1","y1","x2","y2","stroke","strokeWidth","console","log","id","cx","cy","r","fill","rotation","ease","transformOrigin","GameOverWrapper","PlayAgain","Results","h3","GameOver","persistTheme","startGame","chooseNewTheme","toUpperCase","includes","UnderscoreStyles","Underscores","padding","letterSpacing","textTransform","fontFamily","CategoryButton","randCategoryChosen","theme","randomCategory","Game","gameDone","Hangman","gamesPlayed","start","wins","losses","amount","lost","missingLetters","missingIndex","justifyContent","alignItems","charAt","slice","alignSelf","item","words","names","initialState","themeArr","usedTheme","usedThemeArr","wordIndex","revealLetter","reducer","state","action","type","useReducer","dispatch","usedLetterArr","hasLetterAlreadyBeenClicked","arr","newWord","result","length","alpha","counts","forEach","x","_","setTimeout","indexOfMissedLetterArr","j","push","filter","element","addCorrectLettersToArr","convertWordToUnderscores","themeName","rand","returnIndex","newObj","tempResult","u","returnIndx","replayedCategory","Object","values","find","o","grabCorrectIndexFromCategory","shuffle","toLowerCase","hiddenWord","Math","floor","random","funcCallback","useCallback","num","index","newFuncMemo","useMemo","useEffect","ctgry","chooseTheme","HangmanScreen","letterIsInWord","randomNumTenFifteen","animateCategories","interval","clearInterval","App","ReactDOM","render","document","getElementById"],"mappings":"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,UACA,UACA,mBACA,UAGJ,CACEpB,MAAO,mBACPoB,MAAO,CACL,QACA,QACA,SACA,SACA,kBACA,MACA,cACA,MACA,SACA,WACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,QACA,iBACA,OACA,QACA,cACA,OACA,QACA,MACA,OACA,OACA,UAGJ,CACEpB,MAAO,iBACPoB,MAAO,CACL,cACA,0BACA,2BACA,oBACA,UACA,WACA,QACA,uBACA,eACA,aACA,kBACA,eAGJ,CACEpB,MAAO,wBACPoB,MAAO,CACL,WACA,cACA,iBACA,OACA,eACA,WACA,WACA,aACA,YACA,OACA,UAGJ,CACEpB,MAAO,SACPoB,MAAO,CACL,SACA,QACA,SACA,OACA,aACA,YACA,OACA,QACA,QACA,UACA,YACA,QACA,OACA,UACA,UACA,YACA,SACA,YACA,QACA,SACA,OACA,SACA,aACA,SACA,YACA,aACA,YACA,cAGJ,CACEpB,MAAO,YACPoB,MAAO,CACL,UACA,eACA,YACA,cACA,oBACA,eACA,cACA,cACA,cACA,eACA,YACA,aACA,gBACA,WACA,qBC9FAC,EAAe,CACnB9E,KAAM,GACNjB,YAAa,CAAC,WACdD,aAAc,EACdF,UAAU,EACVD,YAAa,GACbmF,YAAa,EACbiB,SAAU,GACVhB,OAAO,EACPnB,aAAc,GACdoC,UAAW,GACXC,aAAc,GACdvB,eAAgB,GAChB/D,QAAS,EACT6D,mBAAoB,GACpB0B,WAAY,EACZjF,YAAa,GACbC,UAAU,EACV8D,KAAM,EACNC,OAAQ,CACNC,OAAQ,EACRC,MAAM,EACNC,eAAgB,GAChBC,aAAc,IAEhBc,aAAc,GAGVC,EAAU,SAACC,EAAcC,GAC7B,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,eACFF,EADL,CAEErF,KAAMsF,EAAOtF,OAEjB,IAAK,kBACH,OAAO,eACFqF,EADL,CAEEtG,YAAauG,EAAOvG,cAExB,IAAK,0BACH,OAAO,eACFsG,EADL,CAEEvG,aAAcwG,EAAOxG,eAEzB,IAAK,gBACH,OAAO,eACFuG,EADL,CAEEzG,SAAU0G,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","file":"static/js/main.940b49c5.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nconst AppLayout: FC = ({ children }): JSX.Element => {\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\"\n        }}\n      >\n        <div>{children}</div>\n      </div>\n    </>\n  );\n};\n\nexport default AppLayout;\n","const letters = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\"\n];\n\nexport default letters;\n","import React, { ReactNode } from \"react\";\n\ninterface ColumnProps {\n  size: string;\n  children: ReactNode;\n}\n\nconst Column = ({ size, children }: ColumnProps) => {\n  const columnSize = size\n    .split(\" \")\n    .map((size: string) => \"col-\" + size)\n    .join(\" \");\n  return <div className={columnSize}>{children}</div>;\n};\n\nexport default Column;\n","import React from \"react\";\nimport letters from \"../variables/letters\";\nimport styled from \"styled-components\";\nimport Column from \"./Column\";\n\nconst LetterContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  letter-spacing: 1rem;\n`;\n\nconst ButtonStyles = styled.button`\n  cursor: pointer;\n  height: 40px;\n  width: 40px;\n  margin: 5px;\n  :focus {\n    outline: none;\n  }\n  :disabled {\n    color: #ccc;\n    background: steelblue;\n  }\n  color: steelblue;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst BorderRadius = {\n  borderRadius: \"20px\"\n};\n\ninterface AlphabetProps {\n  guess: Function;\n  letters: string[];\n  usedLetters: string[];\n  gameOver: boolean;\n  margin: number;\n  wrongLetters: number;\n  underscores: string[];\n}\n\nconst Alphabet = ({\n  guess,\n  usedLetters,\n  gameOver,\n  margin,\n  wrongLetters,\n  underscores\n}: AlphabetProps) => {\n  return (\n    <>\n      <LetterContainer style={{ width: \"400px\", margin: margin }}>\n        <Column size=\"xs-3 sm-3 md-3\">\n          {letters.map((letter, i) => {\n            return (\n              <ButtonStyles\n                style={BorderRadius}\n                key={letter}\n                onClick={() => guess(letter)}\n                disabled={\n                  usedLetters.indexOf(letter) >= 0 ||\n                  underscores.indexOf(\"_\") < 0 ||\n                  gameOver ||\n                  wrongLetters >= 10\n                }\n              >\n                {letter}\n              </ButtonStyles>\n            );\n          })}\n        </Column>\n      </LetterContainer>\n    </>\n  );\n};\n\nexport default Alphabet;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface RandomCategoryProps {\n  categories: string[];\n  randomize: Function;\n  counter: number;\n}\n\nconst RandomBtn = styled.button`\n  :focus {\n    outline: none;\n    background: #ccc;\n  }\n  :disabled {\n    color: #234;\n  }\n`;\n\nconst RandomizeCategory = ({\n  categories,\n  randomize,\n  counter\n}: RandomCategoryProps) => {\n  return (\n    <>\n      <RandomBtn\n        style={{ cursor: \"pointer\" }}\n        onClick={() => randomize(categories)}\n        disabled={counter > 0 ? true : false}\n      >\n        Random\n      </RandomBtn>\n    </>\n  );\n};\n\nexport default RandomizeCategory;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface HintProps {\n  giveHint: Function;\n  word: string;\n  wrongLetters: number;\n  lettersLeft: number;\n  usedHint: boolean;\n  underscores: string[];\n}\n\ninterface HintButtonProps {\n  whenActive: boolean;\n}\n\nconst HintButton = styled.button<HintButtonProps>`\n  font-size: 20px;\n  margin: 10px;\n  color: steelblue;\n  :focus {\n    outline: none;\n  }\n  :disabled {\n    color: #ccc;\n  }\n  cursor: pointer;\n  padding: 5px 10px;\n  border: none;\n`;\n\nconst Hint = ({\n  giveHint,\n  wrongLetters,\n  word,\n  lettersLeft,\n  usedHint,\n  underscores\n}: HintProps) => {\n  let guessesLeft = 10 - wrongLetters;\n\n  return (\n    <>\n      <HintButton\n        whenActive={guessesLeft < 2 ? true : false}\n        onClick={() => giveHint(word)}\n        disabled={\n          underscores.indexOf(\"_\") < 0\n            ? true\n            : usedHint\n            ? true\n            : lettersLeft < 2\n            ? true\n            : guessesLeft < 2\n            ? true\n            : false\n        }\n      >\n        Hint\n      </HintButton>\n    </>\n  );\n};\n\nexport default Hint;\n","import React from \"react\";\nimport { Tween } from \"react-gsap\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nconst DropBody = keyframes`\n  80% {\n    transform: translateY(190px)\n  }\n  100% { \n    transform:translateY(175px);\n  }\n\n`;\n\ninterface DelayProps {\n  wait: boolean;\n}\n\nconst Body = styled.g<DelayProps>`\n  animation: ${props =>\n    props.wait &&\n    css`\n      ${DropBody} 0.4s 1 ease-in-out  forwards\n      animation-delay: 1.5s;\n      /* transition-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67); */\n    `};\n`;\n\ninterface EndGameAnimationProps {\n  wrongLetters: number;\n  lettersLeft: number;\n  underscores: string[];\n}\n\nexport const EndGameAnimation = ({\n  wrongLetters,\n  lettersLeft,\n  underscores\n}: EndGameAnimationProps) => {\n  let amountOfPartsToDisplay = 10 - wrongLetters;\n  // console.log(amountOfPartsToDisplay);\n  let win = underscores.indexOf(\"_\") < 0;\n  // console.log(\"WIN:: \", win);\n  return (\n    <>\n      <svg\n        height=\"400\"\n        width=\"400\"\n        viewBox=\"0 0 400 400\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {wrongLetters >= 10 && (\n          <Tween\n            from={{\n              svgDraw: 0\n            }}\n            to={{\n              svgDraw: 1\n            }}\n            duration={0.4}\n            delay={1.4}\n          >\n            <line\n              x1=\"200\"\n              y1=\"20\"\n              x2=\"200\"\n              y2={250}\n              stroke=\"black\"\n              strokeWidth=\"1.5\"\n            ></line>\n          </Tween>\n        )}\n        {wrongLetters >= 1 && (\n          <line\n            x1=\"200\"\n            y1=\"20\"\n            x2=\"200\"\n            y2={60}\n            stroke=\"black\"\n            strokeWidth=\"1.5\"\n          ></line>\n        )}\n        {win && amountOfPartsToDisplay >= 10 && (\n          <>\n            {console.log(\"we here\")}\n            <line\n              x1=\"200\"\n              y1=\"20\"\n              x2=\"200\"\n              y2={60}\n              stroke=\"black\"\n              strokeWidth=\"1.5\"\n            ></line>\n          </>\n        )}\n\n        <Body wait={wrongLetters >= 10} id=\"body\">\n          <g id=\"head\">\n            {wrongLetters >= 2 && (\n              <circle\n                cx=\"200\"\n                cy=\"80\"\n                r=\"20\"\n                stroke=\"black\"\n                strokeWidth=\"4\"\n                fill=\"white\"\n              />\n            )}\n            {win && amountOfPartsToDisplay >= 9 && (\n              <circle\n                cx=\"200\"\n                cy=\"80\"\n                r=\"20\"\n                stroke=\"black\"\n                strokeWidth=\"4\"\n                fill=\"white\"\n              />\n            )}\n            <g id=\"rEyes\">\n              {wrongLetters >= 3 && <circle cx=\"193\" cy=\"80\" r=\"4\" />}\n              {win && amountOfPartsToDisplay >= 8 && (\n                <circle cx=\"193\" cy=\"80\" r=\"4\" />\n              )}\n              {wrongLetters >= 4 && <circle cx=\"207\" cy=\"80\" r=\"4\" />}\n            </g>\n            <g id=\"xEyes\" className=\"hide\">\n              {wrongLetters >= 10 && (\n                <>\n                  <line stroke=\"white\" x1=\"190\" y1=\"78\" x2=\"196\" y2=\"84\" />\n                  <line stroke=\"white\" x1=\"204\" y1=\"78\" x2=\"210\" y2=\"84\" />\n                  <line stroke=\"white\" x1=\"190\" y1=\"84\" x2=\"196\" y2=\"78\" />\n                  <line stroke=\"white\" x1=\"204\" y1=\"84\" x2=\"210\" y2=\"78\" />\n                </>\n              )}\n            </g>\n            <g id=\"mouth\" stroke=\"black\" strokeWidth=\"4\">\n              {wrongLetters >= 10 ? (\n                <circle cx=\"201\" cy=\"90\" r=\"4\" fill=\"none\" strokeWidth=\"2\" />\n              ) : (\n                wrongLetters >= 5 && <line x1=\"197\" y1=\"90\" x2=\"204\" y2=\"90\" />\n              )}\n            </g>\n          </g>\n          <g id=\"torso\" stroke=\"black\" strokeWidth=\"4\">\n            {wrongLetters >= 6 && <line x1=\"200\" y1=\"100\" x2=\"200\" y2=\"150\" />}\n            {wrongLetters >= 7 && (\n              <line id=\"armL\" x1=\"200\" y1=\"120\" x2=\"170\" y2=\"140\" />\n            )}\n            {wrongLetters >= 8 && (\n              <line id=\"armR\" x1=\"200\" y1=\"120\" x2=\"230\" y2=\"140\" />\n            )}\n            {wrongLetters >= 9 && (\n              <line id=\"legL\" x1=\"200\" y1=\"150\" x2=\"180\" y2=\"190\" />\n            )}\n            {wrongLetters >= 10 && (\n              <line id=\"legR\" x1=\"200\" y1=\"150\" x2=\"220\" y2=\"190\" />\n            )}\n          </g>\n        </Body>\n\n        <g id=\"stand\" stroke=\"black\" strokeWidth=\"4\">\n          <line x1=\"10\" y1=\"250\" x2=\"150\" y2=\"250\" />\n\n          <Tween\n            from={{ rotation: 0 }}\n            duration={wrongLetters >= 10 ? 1 : 0}\n            ease=\"Back.easeOut\"\n            to={{\n              rotation: wrongLetters >= 10 ? 90 : 0\n            }}\n          >\n            <line\n              stroke=\"black\"\n              id=\"door1\"\n              x1=\"150\"\n              y1=\"250\"\n              x2=\"200\"\n              y2=\"250\"\n            ></line>\n          </Tween>\n          <Tween\n            from={{ rotation: 0, transformOrigin: \"right\" }}\n            duration={wrongLetters >= 10 ? 1 : 0}\n            ease=\"Back.easeOut\"\n            to={{\n              rotation: wrongLetters >= 10 ? -90 : 0\n            }}\n          >\n            <line\n              stroke=\"black\"\n              id=\"door2\"\n              x1=\"200\"\n              y1=\"250\"\n              x2=\"250\"\n              y2=\"250\"\n            />\n          </Tween>\n          <line x1=\"250\" y1=\"250\" x2=\"390\" y2=\"250\" />\n          <line x1=\"100\" y1=\"325\" x2=\"100\" y2=\"20\" />\n          <line x1=\"100\" y1=\"22\" x2=\"200\" y2=\"22\" />\n          <line x1=\"100\" y1=\"70\" x2=\"150\" y2=\"22\" />\n        </g>\n      </svg>\n    </>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst GameOverWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: center;\n  flex-direction: column;\n`;\n\nconst PlayAgain = styled.button`\n  width: 100px;\n  height: 50px;\n  background: #234;\n  color: #fff;\n  border-radius: 20px;\n  cursor: pointer;\n  margin: 10px;\n`;\n\nconst Results = styled.h3`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: center;\n`;\n\ninterface GameOverProps {\n  wrongLetters: number;\n  underscores: string[];\n  persistTheme: string;\n  startGame: Function;\n  chooseNewTheme: Function;\n  word: string;\n  gameOver: boolean;\n}\n\nconst GameOver = ({\n  wrongLetters,\n  underscores,\n  persistTheme,\n  startGame,\n  chooseNewTheme,\n  word,\n  gameOver\n}: GameOverProps) => {\n  return (\n    <>\n      {gameOver && (\n        <GameOverWrapper>\n          {wrongLetters >= 10 && (\n            <>\n              <Results>\n                Sorry, you have lost. The correct word was {word.toUpperCase()}\n              </Results>\n            </>\n          )}\n          {underscores.includes(\"_\") && (\n            <>\n              <Results>\n                Good job! You guessed {word.toUpperCase()}!\n                {persistTheme === \"glam metal bands\" && \" ROCK ON\"}\n              </Results>\n            </>\n          )}\n          <PlayAgain onClick={() => startGame(persistTheme)}>\n            Play again\n          </PlayAgain>\n          <button onClick={() => chooseNewTheme()}>Choose New Theme</button>\n        </GameOverWrapper>\n      )}\n    </>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface UnderscoresProps {\n  underscores: string[];\n}\n\nconst UnderscoreStyles = styled.div`\n  display: flex;\n`;\nconst Underscores = ({ underscores }: UnderscoresProps) => {\n  return (\n    <>\n      <UnderscoreStyles\n        style={{\n          padding: \"1rem\",\n          letterSpacing: \"1rem\",\n          textTransform: \"uppercase\",\n          fontFamily: \"Baloo Bhai\"\n        }}\n      >\n        {underscores}\n      </UnderscoreStyles>\n    </>\n  );\n};\n\nexport default Underscores;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Alphabet from \"./Alphabet\";\n// import { GiFruitBowl } from \"react-icons/gi\";\nimport RandomizeCategory from \"./RandomizeCategory\";\nimport Hint from \"./Hint\";\nimport \"../index.css\";\nimport { EndGameAnimation } from \"../utils/EndGameAnimation\";\nimport GameOver from \"./GameOver\";\nimport Underscores from \"./Underscores\";\n\ninterface CategoryButtonProps {\n  theme: string;\n  randCategoryChosen: string;\n  randomCategory: string;\n}\n\nconst CategoryButton = styled.button<CategoryButtonProps>`\n  &:disabled {\n    color: ${props =>\n      props.randCategoryChosen === props.theme\n        ? \"steelblue\"\n        : props.randomCategory === props.theme\n        ? \"#fff\"\n        : \"#000\"};\n    background: ${props =>\n      props.randCategoryChosen === props.theme\n        ? \"#fff\"\n        : props.randomCategory === props.theme\n        ? \"steelblue\"\n        : \"#fff\"};\n  }\n  margin: 10px;\n  padding: 10px;\n  cursor: pointer;\n  border: ${props =>\n    props.randCategoryChosen === props.theme ? \"2px solid steelblue\" : \"\"};\n  transform: ${props =>\n    props.randCategoryChosen === props.theme ? \"scale(1.15)\" : \"\"};\n  transition: ${props =>\n    props.randCategoryChosen === props.theme ? \"0.2s\" : \"\"};\n`;\n\ninterface BackgroundProps {\n  gameDone: boolean;\n}\n\nconst Game = styled.div<BackgroundProps>`\n  /* opacity: ${props => props.gameDone && 0.15}; */\n  display: ${props => props.gameDone && \"none\"};\n`;\n\ninterface HangmanScreenProps {\n  guess: Function;\n  letters: string[];\n  word: string;\n  underscores: string[];\n  wrongLetters: number;\n  usedLetters: string[];\n  gameOver: boolean;\n  startGame: Function;\n  gamesPlayed: number;\n  theme: string[];\n  start: boolean;\n  persistTheme: string;\n  chooseNewTheme: Function;\n  randomize: Function;\n  randomCategory: string;\n  randCategoryChosen: string;\n  counter: number;\n  giveHint: Function;\n  lettersLeft: number;\n  usedHint: boolean;\n  wins: number;\n  losses: {\n    lost: boolean;\n    amount: number;\n    missingLetters: string[];\n    missingIndex: number[];\n  };\n}\n\nconst Hangman = ({\n  guess,\n  letters,\n  word,\n  underscores,\n  wrongLetters,\n  usedLetters,\n  gameOver,\n  startGame,\n  gamesPlayed,\n  theme,\n  start,\n  persistTheme,\n  chooseNewTheme,\n  randomize,\n  randomCategory,\n  randCategoryChosen,\n  counter,\n  giveHint,\n  lettersLeft,\n  usedHint,\n  wins,\n  losses: { lost, amount, missingLetters, missingIndex }\n}: HangmanScreenProps) => {\n  return (\n    <div>\n      <Game gameDone={gameOver}>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          <h1\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              fontFamily: \"Baloo Bhai\"\n            }}\n          >\n            Hangman\n          </h1>\n          <div style={{ fontFamily: \"Baloo Bhai\" }}>\n            {`${persistTheme.charAt(0).toUpperCase()}${persistTheme.slice(1)}`}\n          </div>\n        </div>\n      </Game>\n\n      <GameOver\n        wrongLetters={wrongLetters}\n        underscores={underscores}\n        persistTheme={persistTheme}\n        startGame={startGame}\n        chooseNewTheme={chooseNewTheme}\n        word={word}\n        gameOver={gameOver}\n      />\n\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        {!start && (\n          <>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              <div style={{ display: \"flex\", alignSelf: \"center\" }}>\n                Choose a theme\n              </div>\n              <div style={{ display: \"flex\" }}>\n                {theme.map((theme: string, i: number) => {\n                  return (\n                    <CategoryButton\n                      theme={theme}\n                      randCategoryChosen={randCategoryChosen}\n                      randomCategory={randomCategory}\n                      disabled={counter > 0 ? true : false}\n                      onClick={() => startGame(theme)}\n                      key={i}\n                    >\n                      {theme}\n                    </CategoryButton>\n                  );\n                })}\n              </div>\n              <RandomizeCategory\n                randomize={randomize}\n                categories={theme}\n                counter={counter}\n              />\n            </div>\n          </>\n        )}\n      </div>\n      <Game gameDone={gameOver}>\n        {start && (\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              flexDirection: \"column\"\n            }}\n          >\n            <EndGameAnimation\n              wrongLetters={wrongLetters}\n              lettersLeft={lettersLeft}\n              underscores={underscores}\n            />\n            <Underscores underscores={underscores} />\n            <Alphabet\n              margin={0}\n              usedLetters={usedLetters}\n              letters={letters}\n              guess={guess}\n              gameOver={gameOver}\n              wrongLetters={wrongLetters}\n              underscores={underscores}\n            />\n            <Hint\n              giveHint={giveHint}\n              word={word}\n              wrongLetters={wrongLetters}\n              lettersLeft={lettersLeft}\n              usedHint={usedHint}\n              underscores={underscores}\n            />\n            {/* {persistTheme === \"fruits\" && <GiFruitBowl />} */}\n            <div>You have {10 - wrongLetters} guesses left</div>\n            <div>Used letters: {usedLetters.map(item => item)}</div>\n            <div>Games Played: {gamesPlayed}</div>\n            <div>wins: {wins}</div>\n            <div>losses: {amount}</div>\n          </div>\n        )}\n      </Game>\n    </div>\n  );\n};\n\nexport default Hangman;\n","const words = [\n  {\n    theme: \"roller coasters\",\n    names: [\n      \"yukon striker\",\n      \"tatsu\",\n      \"batman\",\n      \"scream\",\n      \"joker\",\n      \"superman\",\n      \"wicked cyclone\",\n      \"steel vengeance\",\n      \"formula rossa\",\n      \"top thrill dragster\",\n      \"millenium force\",\n      \"orion\",\n      \"hyperion\",\n      \"copperhead strike\",\n      \"dragonfire\",\n      \"draken\",\n      \"montu\",\n      \"kumba\",\n      \"shiekra\",\n      \"iron gwazi\",\n      \"maxx force\",\n      \"incredible hulk\",\n      \"full throttle\",\n      \"goliath\",\n      \"deja vu\",\n      \"twisted colossus\",\n      \"viper\"\n    ]\n  },\n  {\n    theme: \"sonic characters\",\n    names: [\n      \"sonic\",\n      \"tails\",\n      \"shadow\",\n      \"silver\",\n      \"doctor robotnik\",\n      \"amy\",\n      \"metal sonic\",\n      \"big\",\n      \"vector\",\n      \"knuckles\",\n      \"espio\",\n      \"charmy\",\n      \"rouge\",\n      \"chip\",\n      \"werehog\",\n      \"blaze\",\n      \"tikal\",\n      \"chaos\",\n      \"princess elise\",\n      \"chao\",\n      \"zavok\",\n      \"super sonic\",\n      \"wisp\",\n      \"cream\",\n      \"jet\",\n      \"wave\",\n      \"zazz\",\n      \"storm\"\n    ]\n  },\n  {\n    theme: \"computer parts\",\n    names: [\n      \"motherboard\",\n      \"central processing unit\",\n      \"graphics processing unit\",\n      \"solid state drive\",\n      \"monitor\",\n      \"keyboard\",\n      \"mouse\",\n      \"random access memory\",\n      \"water cooler\",\n      \"air cooler\",\n      \"hard disk drive\",\n      \"heat sinks\"\n    ]\n  },\n  {\n    theme: \"80's metal/glam bands\",\n    names: [\n      \"bon jovi\",\n      \"motley crue\",\n      \"twisted sister\",\n      \"ratt\",\n      \"enuff z nuff\",\n      \"the cult\",\n      \"skid row\",\n      \"cinderella\",\n      \"slaughter\",\n      \"wasp\",\n      \"tesla\"\n    ]\n  },\n  {\n    theme: \"fruits\",\n    names: [\n      \"banana\",\n      \"apple\",\n      \"grapes\",\n      \"kiwi\",\n      \"strawberry\",\n      \"raspberry\",\n      \"pear\",\n      \"mango\",\n      \"guava\",\n      \"coconut\",\n      \"pineapple\",\n      \"lemon\",\n      \"lime\",\n      \"kumquat\",\n      \"apricot\",\n      \"blueberry\",\n      \"cherry\",\n      \"nectarine\",\n      \"peach\",\n      \"orange\",\n      \"plum\",\n      \"lychee\",\n      \"blackberry\",\n      \"jujube\",\n      \"cranberry\",\n      \"watermelon\",\n      \"cantelope\",\n      \"tangerine\"\n    ]\n  },\n  {\n    theme: \"dinosaurs\",\n    names: [\n      \"ardonyx\",\n      \"bactrosaurus\",\n      \"camelotia\",\n      \"dacentrurus\",\n      \"tyrannosaurus rex\",\n      \"velociraptor\",\n      \"triceratops\",\n      \"stegosaurus\",\n      \"pterodactyl\",\n      \"brontosaurus\",\n      \"theropods\",\n      \"gallimimus\",\n      \"armargasaurus\",\n      \"efraasia\",\n      \"gargoyleosaurus\"\n    ]\n  }\n];\n\nexport default words;\n","import React, { FC, useEffect, useReducer, useCallback, useMemo } from \"react\";\nimport HangmanScreen from \"./HangmanScreen\";\nimport words from \"../variables/words\";\nimport letters from \"../variables/letters\";\n\ninterface State {\n  word: string;\n  underscores: string[];\n  wrongLetters: number;\n  gameOver: boolean;\n  usedLetters: string[];\n  gamesPlayed: number;\n  themeArr: string[];\n  start: boolean;\n  persistTheme: string;\n  usedTheme: string[];\n  usedThemeArr: object[];\n  randomCategory: string;\n  counter: number;\n  randCategoryChosen: string;\n  wordIndex: number;\n  lettersLeft: number;\n  usedHint: boolean;\n  wins: number;\n  losses: {\n    lost: boolean;\n    amount: number;\n    missingLetters: string[];\n    missingIndex: number[];\n  };\n  revealLetter: number;\n}\n\ntype Action =\n  | { type: \"SET_WORD\"; word: string }\n  | { type: \"SET_UNDERSCORES\"; underscores: string[] }\n  | { type: \"SET_WRONG_LETTER_AMOUNT\"; wrongLetters: number }\n  | { type: \"SET_GAME_OVER\"; gameOver: boolean }\n  | { type: \"SET_USED_LETTERS\"; usedLetters: string[] }\n  | { type: \"SET_GAMES_PLAYED\"; gamesPlayed: number }\n  | { type: \"SET_CHOOSE_THEME\"; themeArr: string[] }\n  | { type: \"SET_START_GAME\"; start: boolean }\n  | { type: \"SET_PERSIST_THEME\"; persistTheme: string }\n  | { type: \"SET_USED_THEME\"; usedTheme: string[] }\n  | { type: \"SET_USED_THEME_ARR\"; usedThemeArr: object[] }\n  | { type: \"SET_RANDOM_CATEGORY\"; randomCategory: string }\n  | { type: \"SET_COUNTER\"; counter: number }\n  | { type: \"SET_RAND_WORD_CHOSEN\"; randCategoryChosen: string }\n  | { type: \"SET_WORD_INDEX\"; wordIndex: number }\n  | { type: \"SET_TOTAL_LETTERS_LEFT\"; lettersLeft: number }\n  | { type: \"SET_USED_HINT\"; usedHint: boolean }\n  | { type: \"SET_WINS\" }\n  | { type: \"SET_LOSSES\"; missingLetters: string[]; missingIndex: number[] }\n  | { type: \"REVEAL_LETTER\"; revealLetter: number };\n\nconst initialState = {\n  word: \"\",\n  underscores: [\"_ _ _ _\"],\n  wrongLetters: 0,\n  gameOver: false,\n  usedLetters: [],\n  gamesPlayed: 0,\n  themeArr: [],\n  start: false,\n  persistTheme: \"\",\n  usedTheme: [],\n  usedThemeArr: [],\n  randomCategory: \"\",\n  counter: 0,\n  randCategoryChosen: \"\",\n  wordIndex: -1,\n  lettersLeft: 10,\n  usedHint: false,\n  wins: 0,\n  losses: {\n    amount: 0,\n    lost: false,\n    missingLetters: [],\n    missingIndex: []\n  },\n  revealLetter: 0\n};\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_WORD\":\n      return {\n        ...state,\n        word: action.word\n      };\n    case \"SET_UNDERSCORES\":\n      return {\n        ...state,\n        underscores: action.underscores\n      };\n    case \"SET_WRONG_LETTER_AMOUNT\":\n      return {\n        ...state,\n        wrongLetters: action.wrongLetters\n      };\n    case \"SET_GAME_OVER\":\n      return {\n        ...state,\n        gameOver: action.gameOver\n      };\n    case \"SET_USED_LETTERS\":\n      return {\n        ...state,\n        usedLetters: action.usedLetters\n      };\n    case \"SET_GAMES_PLAYED\":\n      return {\n        ...state,\n        gamesPlayed: action.gamesPlayed\n      };\n    case \"SET_CHOOSE_THEME\":\n      return {\n        ...state,\n        themeArr: action.themeArr\n      };\n    case \"SET_START_GAME\":\n      return {\n        ...state,\n        start: action.start\n      };\n    case \"SET_PERSIST_THEME\":\n      return {\n        ...state,\n        persistTheme: action.persistTheme\n      };\n    case \"SET_USED_THEME\":\n      return {\n        ...state,\n        usedTheme: action.usedTheme\n      };\n    case \"SET_USED_THEME_ARR\":\n      return {\n        ...state,\n        usedThemeArr: action.usedThemeArr\n      };\n    case \"SET_RANDOM_CATEGORY\":\n      return {\n        ...state,\n        randomCategory: action.randomCategory\n      };\n    case \"SET_COUNTER\":\n      return {\n        ...state,\n        counter: action.counter\n      };\n    case \"SET_RAND_WORD_CHOSEN\":\n      return {\n        ...state,\n        randCategoryChosen: action.randCategoryChosen\n      };\n    case \"SET_WORD_INDEX\":\n      return {\n        ...state,\n        wordIndex: action.wordIndex\n      };\n    case \"SET_TOTAL_LETTERS_LEFT\":\n      return {\n        ...state,\n        lettersLeft: action.lettersLeft\n      };\n\n    case \"SET_USED_HINT\":\n      return {\n        ...state,\n        usedHint: action.usedHint\n      };\n    case \"SET_WINS\":\n      return {\n        ...state,\n        wins: state.wins + 1\n      };\n    case \"SET_LOSSES\":\n      return {\n        ...state,\n        losses: {\n          ...state.losses,\n          amount: state.losses.amount + 1,\n          lost: true,\n          missingLetters: action.missingLetters,\n          missingIndex: action.missingIndex\n        }\n      };\n    case \"REVEAL_LETTER\":\n      return {\n        ...state,\n        underscores: state.underscores.map((letter: string, i: number) =>\n          i === action.revealLetter ? state.word[action.revealLetter] : letter\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nconst Hangman: FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // deconstructed word\n  const { word } = state;\n\n  const addCorrectLettersToArr = (letter: string, arr: string[]) => {\n    let newWord;\n    let result: any[] = [];\n\n    for (let i = 0; i < word.length; i++) {\n      if (letter === word[i]) {\n        newWord = word\n          .split(\"\")\n          .map((alpha: string) =>\n            alpha === \" \" ? \" \" : arr.indexOf(alpha) < 0 ? \"_\" : alpha\n          );\n\n        dispatch({ type: \"SET_UNDERSCORES\", underscores: newWord });\n\n        let counts = {} as any;\n        let elements = newWord;\n\n        elements.forEach((x: string | number) => {\n          counts[x] = (counts[x] || 0) + 1;\n        });\n\n        dispatch({ type: \"SET_TOTAL_LETTERS_LEFT\", lettersLeft: counts._ });\n      }\n    }\n\n    // winner\n    if (\n      newWord &&\n      newWord.join(\"\") === word &&\n      state.losses.missingLetters.length <= 0\n    ) {\n      console.log(\"this is if we have won\");\n      dispatch({ type: \"SET_WINS\" });\n      setTimeout(() => {\n        dispatch({ type: \"SET_GAME_OVER\", gameOver: true });\n      }, 3000);\n    }\n\n    // loser\n    if (state.wrongLetters >= 10) {\n      console.log(\"you have lost\");\n\n      let indexOfMissedLetterArr: number[] = [];\n\n      for (let j = 0; j < state.underscores.length; j++) {\n        if (state.underscores[j] === \"_\") {\n          indexOfMissedLetterArr.push(j);\n          result = word\n            .split(\"\")\n            .filter(\n              (element: any, i: number) =>\n                indexOfMissedLetterArr.indexOf(i) !== -1\n            );\n        }\n      }\n\n      dispatch({\n        type: \"SET_LOSSES\",\n        missingLetters: result,\n        missingIndex: indexOfMissedLetterArr\n      });\n    }\n  };\n\n  // place clicked letters into an array\n  const usedLetterArr = (letter: string) => {\n    if (!hasLetterAlreadyBeenClicked(letter)) {\n      dispatch({\n        type: \"SET_USED_LETTERS\",\n        usedLetters: [...state.usedLetters, letter]\n      });\n      if (state.wrongLetters >= 10) {\n      }\n      addCorrectLettersToArr(letter, [...state.usedLetters, letter]);\n    }\n  };\n\n  const hasLetterAlreadyBeenClicked = (letter: string) =>\n    state.usedLetters.indexOf(letter) >= 0;\n\n  // check is letter is used\n  const letterIsInWord = (letter: string) => word.indexOf(letter) >= 0;\n\n  const guess = (letter: string): void => {\n    if (!letterIsInWord(letter)) {\n      dispatch({\n        type: \"SET_WRONG_LETTER_AMOUNT\",\n        wrongLetters: state.wrongLetters += 1\n      });\n    }\n    usedLetterArr(letter);\n  };\n\n  const chooseTheme = () => {\n    let themeArr: string[] = [];\n    words.map(ctgry => {\n      themeArr.push(ctgry.theme);\n      dispatch({ type: \"SET_CHOOSE_THEME\", themeArr: themeArr });\n      return ctgry.theme;\n    });\n  };\n\n  // places player at the following index according\n  // to which category they chose\n  const grabCorrectIndexFromCategory = (themeName: string) => {\n    let newObj = {\n      usedTheme: themeName\n    };\n\n    dispatch({\n      type: \"SET_USED_THEME_ARR\",\n      usedThemeArr: [...state.usedThemeArr, newObj]\n    });\n\n    let tempResult = {} as any;\n    for (let u of state.usedThemeArr as any) {\n      tempResult[u.usedTheme] = {\n        returnIndx: 1,\n        ...u,\n        ...(tempResult[u.usedTheme] && {\n          returnIndx: tempResult[u.usedTheme].returnIndx + 1\n        })\n      };\n    }\n\n    let result = Object.values(tempResult) as any;\n\n    let replayedCategory = result.find(\n      (o: { usedTheme: string }) => o.usedTheme === themeName\n    );\n\n    if (replayedCategory) {\n      return replayedCategory.returnIndx;\n    }\n  };\n\n  const convertWordToUnderscores = (themeName: string) => {\n    words.forEach(theme => {\n      if (theme.theme === themeName) {\n        let rand: string = \"\";\n\n        dispatch({ type: \"SET_PERSIST_THEME\", persistTheme: themeName });\n\n        if (!state.usedTheme.includes(themeName)) {\n          dispatch({\n            type: \"SET_USED_THEME\",\n            usedTheme: [...state.usedTheme, themeName]\n          });\n        }\n\n        let returnIndex = grabCorrectIndexFromCategory(themeName);\n        console.log(\"return index\", returnIndex);\n\n        if (\n          state.persistTheme === themeName ||\n          state.usedTheme.includes(themeName)\n        ) {\n          rand = theme.names[returnIndex++ % theme.names.length];\n        } else {\n          rand = shuffle(theme.names)[0];\n        }\n\n        dispatch({ type: \"SET_WORD\", word: rand.toLowerCase() });\n\n        let hiddenWord = rand\n          .split(\"\")\n          .map((letter: string) => (letter === \" \" ? \" \" : \"_\"));\n\n        dispatch({ type: \"SET_UNDERSCORES\", underscores: hiddenWord });\n      }\n    });\n  };\n\n  const shuffle = (arr: string[]) => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    console.log(\"shuffled arr\", arr);\n    return arr;\n  };\n\n  const randomize = (arr: string[]) => {\n    let index: number;\n\n    if (state.wordIndex !== -1) {\n      index = state.wordIndex;\n    } else {\n      index = 0;\n    }\n\n    let randomNumTenFifteen = Math.floor(Math.random() * (15 - 10 + 1) + 10);\n\n    let animateCategories = () => {\n      dispatch({\n        type: \"SET_COUNTER\",\n        counter: state.counter += randomNumTenFifteen\n      });\n\n      let randomCategory: string = arr[index++ % arr.length];\n\n      console.log(state.counter);\n\n      dispatch({ type: \"SET_RANDOM_CATEGORY\", randomCategory: randomCategory });\n\n      let wordIndex = arr.indexOf(randomCategory);\n\n      dispatch({ type: \"SET_WORD_INDEX\", wordIndex: wordIndex });\n\n      let interval = setTimeout(animateCategories, state.counter);\n      if (state.counter > 235) {\n        console.log(\"RANDOM CAT:: \", randomCategory);\n        clearInterval(interval);\n        dispatch({\n          type: \"SET_RAND_WORD_CHOSEN\",\n          randCategoryChosen: randomCategory\n        });\n        setTimeout(() => {\n          startGame(arr[wordIndex]);\n        }, 1250);\n      }\n    };\n    setTimeout(animateCategories, state.counter);\n  };\n\n  const giveHint = (word: string) => {\n    console.log(\"the hint word\", word);\n    // check which letters are in word\n    letters.forEach(letter => {\n      if (word.includes(letter)) {\n        usedLetterArr(letter);\n      }\n    });\n    dispatch({\n      type: \"SET_WRONG_LETTER_AMOUNT\",\n      wrongLetters: state.wrongLetters + 1\n    });\n    dispatch({ type: \"SET_USED_HINT\", usedHint: true });\n  };\n\n  const startGame = (theme: string) => {\n    convertWordToUnderscores(theme);\n\n    dispatch({ type: \"SET_WRONG_LETTER_AMOUNT\", wrongLetters: 0 });\n\n    dispatch({ type: \"SET_USED_LETTERS\", usedLetters: [] });\n\n    dispatch({ type: \"SET_GAME_OVER\", gameOver: false });\n\n    dispatch({ type: \"SET_START_GAME\", start: true });\n\n    dispatch({ type: \"SET_COUNTER\", counter: 0 });\n\n    dispatch({ type: \"SET_USED_HINT\", usedHint: false });\n\n    dispatch({ type: \"SET_TOTAL_LETTERS_LEFT\", lettersLeft: 10 });\n  };\n\n  const chooseNewTheme = () => {\n    dispatch({\n      type: \"SET_RAND_WORD_CHOSEN\",\n      randCategoryChosen: \"\"\n    });\n    dispatch({ type: \"SET_WRONG_LETTER_AMOUNT\", wrongLetters: 0 });\n\n    dispatch({ type: \"SET_USED_LETTERS\", usedLetters: [] });\n\n    dispatch({ type: \"SET_GAME_OVER\", gameOver: false });\n\n    dispatch({ type: \"SET_START_GAME\", start: false });\n  };\n\n  const displayMissingLetters = () => {\n    setTimeout(() => {\n      state.losses.missingIndex.forEach((num, index) => {\n        setTimeout(() => {\n          dispatch({ type: \"REVEAL_LETTER\", revealLetter: num });\n        }, index * 100);\n      });\n    }, 750);\n  };\n\n  const funcCallback = useCallback(displayMissingLetters, [\n    state.losses.missingLetters\n  ]);\n\n  const newFuncMemo = useMemo(() => funcCallback, [funcCallback]);\n\n  useEffect(() => {\n    chooseTheme();\n\n    newFuncMemo();\n  }, [newFuncMemo, state.losses.missingLetters]);\n\n  return (\n    <>\n      <HangmanScreen\n        underscores={state.underscores}\n        word={word}\n        guess={guess}\n        letters={letters}\n        wrongLetters={state.wrongLetters}\n        usedLetters={state.usedLetters}\n        gameOver={state.gameOver}\n        startGame={startGame}\n        gamesPlayed={state.gamesPlayed}\n        theme={state.themeArr}\n        start={state.start}\n        persistTheme={state.persistTheme}\n        chooseNewTheme={chooseNewTheme}\n        randomize={randomize}\n        randomCategory={state.randomCategory}\n        randCategoryChosen={state.randCategoryChosen}\n        counter={state.counter}\n        giveHint={giveHint}\n        lettersLeft={state.lettersLeft}\n        usedHint={state.usedHint}\n        wins={state.wins}\n        losses={state.losses}\n      />\n    </>\n  );\n};\n\nexport default Hangman;\n","import React from \"react\";\nimport AppLayout from \"./layouts/AppLayout\";\nimport Hangman from \"./components/Hangman\";\n\nconst App = () => {\n  return (\n    <AppLayout>\n      <Hangman />\n    </AppLayout>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}